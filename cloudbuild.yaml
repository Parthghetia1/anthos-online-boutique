steps:
  - id: 'build'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/frontend:latest'
      - '.'
  - id: 'scan'
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: /bin/bash
    args:
    - -c
    - |
      gcloud artifacts docker images scan gcr.io/$PROJECT_ID/frontend:latest \
      --format='value(response.scan)' > ./scan_id.txt | echo ./scan_id.txt
  - id: 'severity check'
    name: gcr.io/google.com/cloudsdktool/cloud-sdk
    entrypoint: /bin/bash
    args:
    - -c
    - |
      gcloud artifacts docker images list-vulnerabilities $(cat ./scan_id.txt) \
      --format='value(vulnerability.effectiveSeverity)' | if grep -Fxq CRITICAL; \
      then echo 'Failed vulnerability check' && exit 1; else echo 'No crazy vulnerabilities found' exit 0; fi
  - id: 'publish'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/frontend:latest'

  - id: 'build-attestation-image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
      - './binary-auth/'
  - id: 'publish-binary-auth-image'
    name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
  - id: 'create-attestation'
    name: 'gcr.io/$PROJECT_ID/binauthz-attestation:latest'
    args:
      - '--artifact-url'
      - 'gcr.io/$PROJECT_ID/frontend:latest'
      - '--attestor'
      - 'projects/$PROJECT_ID/attestors/${_ATTESTOR_NAME}'
      - '--keyversion'
      - 'projects/${PROJECT_ID}/locations/global/keyRings/"$KEY_RING"/cryptoKeys/${_ATTESTOR_KEY}/cryptoKeyVersions/1'
    secretEnv: ['KEY_RING']
  # This step clones the hello-cloudbuild-env repository
  - name: 'gcr.io/cloud-builders/gcloud'
    id: clone-deploy-repository
    entrypoint: /bin/sh
    args:
    - '-c'
    - |
      gcloud source repos clone cloudbuild-cd-config-pc && \
      cd cloudbuild-cd-config-pc && \
      git checkout master && \
      cd k8s && \
      git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)')

  - id: 'get-image-checksum'
    name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: /bin/bash
    args: 
    - -c
    - |
      gcloud container images describe gcr.io/$PROJECT_ID/frontend:latest \
      --format 'value(image_summary.digest)' > ./checksum.txt | echo ./checksum.txt
  # This step generates the new manifest
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: generate-manifest
    entrypoint: /bin/bash
    args:
    - '-c'
    - |
       sed "s/GOOGLE_CLOUD_PROJECT/${PROJECT_ID}/g" kubernetes.yaml.tpl | \
       sed "s/COMMIT_SHA/$(cat ./checksum.txt)/g" > cloudbuild-cd-config-pc/k8s/kubernetes.yaml
  
  # This step pushes the manifest back to hello-cloudbuild-env
  - name: 'gcr.io/cloud-builders/gcloud'
    id: push-manifest
    entrypoint: /bin/sh
    args:
    - '-c'
    - |
      set -x && \
      cd cloudbuild-cd-config-pc && \
      git add ./k8s && \
      git commit -m "Deploying image gcr.io/$PROJECT_ID/frontend:${COMMIT_SHA}
      Built from commit ${COMMIT_SHA} of repository frontend-app
      Author: $(git log --format='%an <%ae>' -n 1 HEAD)" && \
      git push -u origin master
options:
  workerPool:
    'projects/parth-test-1-363401/locations/us-central1/workerPools/private-cluster-example-workerpool'
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/KEY_RING/versions/1
    env: 'KEY_RING'